Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p2_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 64, 35, 35] out_shape: [2, 48, 35, 35]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dropout<keep_prob=0.5>
insert_layer_outshape not equal!: [2, 48, 35, 35]
mut_result:True
1 generation!

Adopt LD mut_strategy!
delete layer_name:inception2.p2_2
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
2 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p3_2 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 64, 35, 35] out_shape: [2, 96, 35, 35]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: convbnrelu<
  (conbnrelu_conv): Conv2d<input_channels=64, output_channels=96, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf18ffd0>, bias_init=None, format=NCHW>
  (conbnrelu_bn): BatchNorm2d<num_features=96, eps=1e-05, momentum=0.9, gamma=Parameter (name=conbnrelu_bn.gamma, shape=(96,), dtype=Float32, requires_grad=True), beta=Parameter (name=conbnrelu_bn.beta, shape=(96,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=conbnrelu_bn.moving_mean, shape=(96,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=conbnrelu_bn.moving_variance, shape=(96,), dtype=Float32, requires_grad=False)>
  (conbnrelu_relu): ReLU<>
  >
insert_layer_outshape equal!
mut_result:True
3 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception2.p1_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 256, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: downsample<
  (downsample_conv): Conv2d<input_channels=256, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf18f8d0>, bias_init=None, format=NCHW>
  (downsample_bn): BatchNorm2d<num_features=64, eps=1e-05, momentum=0.9, gamma=Parameter (name=downsample_bn.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=downsample_bn.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=downsample_bn.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=downsample_bn.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
  >
insert_layer_outshape equal!
mut_result:True
4 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 225792] out_shape: [2, 1000]
mut Basic type: True
select insert layer: SE<
  (SE_pool): GlobalAvgPooling<>
  (act): HSigmoid<>
  (SE_act1): ReLU<>
  (SE_act2): HSigmoid<>
  >
replace Basic with CM op!
mut_result:True
5 generation!

Adopt SM mut_strategy!
select layer: avgpool layer_type: <class 'mindspore.nn.layer.pooling.AvgPool2d'> in_shape: [2, 288, 35, 35] out_shape: [2, 288, 28, 28]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: after
mutate output_shape: [2, 24]
mut_result:True
6 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
7 generation!

Adopt LD mut_strategy!
delete layer_name:bn2
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
8 generation!

Adopt LD mut_strategy!
delete layer_name:inception2.p3_2
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
9 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception1.p2_2 layer_type: Conv2d selected param:group input_shape:[2, 48, 35, 35] output_shape:[2, 64, 35, 35]
Edit value: 4 new_inshape: (2, 48, 35, 35) new_outshape: (2, 64, 35, 35)
Conv2d<input_channels=48, output_channels=64, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=4, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf4e86d0>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f26680552d0>, format=NCHW>
mut_result:True
10 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p3_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
select insert layer: Softmax<>
replace Basic with CM op!
mut_result:True
11 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p4_1 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
select insert layer: downsample<
  (downsample_conv): Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26be925090>, bias_init=None, format=NCHW>
  (downsample_bn): BatchNorm2d<num_features=64, eps=1e-05, momentum=0.9, gamma=Parameter (name=1.downsample_bn.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=1.downsample_bn.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=1.downsample_bn.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=1.downsample_bn.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
  >
replace Basic with CM op!
mut_result:True
12 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception1.p2_2 layer_type: Conv2d selected param:group input_shape:[2, 48, 35, 35] output_shape:[2, 64, 35, 35]
Edit value: 2 new_inshape: (2, 48, 35, 35) new_outshape: (2, 64, 35, 35)
Conv2d<input_channels=48, output_channels=64, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=2, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf165b90>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f26bf0cfc90>, format=NCHW>
mut_result:True
13 generation!

Adopt SM mut_strategy!
select layer: inception1.p3_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 96, 35, 35]
mut Basic type: True
candidate_in_mutlayers_indice:1
mutate state: after
mutate output_shape: [2, 8, 4]
mut_result:True
14 generation!

Adopt LD mut_strategy!
delete layer_name:inception1.p2_2
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
15 generation!

Adopt SM mut_strategy!
select layer: inception1.p3_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 96, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
16 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception2.p2_1 layer_type: Conv2d selected param:stride input_shape:[2, 256, 35, 35] output_shape:[2, 48, 35, 35]
Edit value: (2, 4) new_inshape: (2, 256, 35, 35) new_outshape: (2, 48, 18, 9)
mutate op infor:
SequentialCell<
  (0): Conv2d<input_channels=256, output_channels=48, kernel_size=(1, 1), stride=(2, 4), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bed93990>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f26bed93d50>, format=NCHW>
  (1): Replace_ms<>
  >
mut_result:True
17 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: bn3 layer_type: <class 'mindspore.nn.layer.normalization.BatchNorm2d'> in_shape: [2, 64, 72, 72] out_shape: [2, 64, 72, 72]
mut Basic type: True
select insert layer: ReLU<>
replace Basic with CM op!
mut_result:True
18 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: dropout layer_type: Dropout selected param:keep_prob input_shape:[2, 288, 28, 28] output_shape:[2, 288, 28, 28]
Edit value: 0.1 new_inshape: (2, 288, 28, 28) new_outshape: (2, 288, 28, 28)
Dropout<keep_prob=0.1>
mut_result:True
19 generation!

Adopt SM mut_strategy!
select layer: inception2.p1_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
candidate_in_mutlayers_indice:1
mutate state: all
mutate input_shape: [2, 9, 39, 6]
mutate output_shape: [2, 40, 38, 2]
mut_result:True
20 generation!

Adopt SM mut_strategy!
select layer: inception1.p3_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 96, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
21 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception2.p4_2 layer_type: Conv2d selected param:stride input_shape:[2, 256, 35, 35] output_shape:[2, 64, 35, 35]
Edit value: (3, 3) new_inshape: (2, 256, 35, 35) new_outshape: (2, 64, 12, 12)
mutate op infor:
SequentialCell<
  (0): Conv2d<input_channels=256, output_channels=64, kernel_size=(1, 1), stride=(3, 3), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26be98a450>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f26bf1ef550>, format=NCHW>
  (1): Replace_ms<>
  >
mut_result:True
22 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p1_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: ELU<>
insert_layer_outshape equal!
mut_result:True
23 generation!

Adopt SM mut_strategy!
select layer: inception2.p1_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
24 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: conv2 layer_type: Conv2d selected param:in_channels input_shape:[2, 32, 74, 74] output_shape:[2, 32, 72, 72]
Edit value: 128 new_inshape: (2, 128, 74, 74) new_outshape: (2, 32, 74, 74)
mutate op infor:
SequentialCell<
  (0): Replace_ms<>
  (1): Conv2d<input_channels=128, output_channels=32, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26be9e0cd0>, bias_init=None, format=NCHW>
  (2): Replace_ms<>
  >
mut_result:True
25 generation!

Adopt SM mut_strategy!
select layer: avgpool layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 288, 35, 35] out_shape: [2, 288, 28, 28]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
26 generation!

Adopt SM mut_strategy!
select layer: dropout layer_type: <class 'mindspore.nn.layer.basic.Dropout'> in_shape: [2, 288, 28, 28] out_shape: [2, 288, 28, 28]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: before
mutate input_shape: [2, 26, 25, 19]
mut_result:True
27 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: bn3 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 64, 72, 72] out_shape: [2, 64, 72, 72]
mut Basic type: True
select insert layer: Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26becb8450>, bias_init=None, format=NCHW>
replace Basic with CM op!
mut_result:True
28 generation!

Adopt LC mut_strategy!
select layer: conv1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 3, 150, 150] out_shape: [2, 32, 74, 74]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=32, output_channels=32, kernel_size=(3, 3), stride=(2, 2), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f266266f9d0>, bias_init=None, format=NCHW>
insert_layer_outshape not equal!: [2, 32, 74, 74]
mut_result:True
29 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p4_1 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: ResidualBlock<
  (residual_conv1): Conv2d<input_channels=64, output_channels=16, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf444c90>, bias_init=None, format=NCHW>
  (residual_bn1): BatchNorm2d<num_features=16, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn1.gamma, shape=(16,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn1.beta, shape=(16,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn1.moving_mean, shape=(16,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn1.moving_variance, shape=(16,), dtype=Float32, requires_grad=False)>
  (residual_conv2): Conv2d<input_channels=16, output_channels=16, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf44ddd0>, bias_init=None, format=NCHW>
  (residual_bn2): BatchNorm2d<num_features=16, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn2.gamma, shape=(16,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn2.beta, shape=(16,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn2.moving_mean, shape=(16,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn2.moving_variance, shape=(16,), dtype=Float32, requires_grad=False)>
  (residual_conv3): Conv2d<input_channels=16, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf46fe10>, bias_init=None, format=NCHW>
  (residual_bn3): BatchNorm2d<num_features=64, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn3.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn3.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn3.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn3.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
  (residual_relu1): ReLU<>
  (residual_relu2): ReLU<>
  (residual_relu3): ReLU<>
  (residual_down_sample_layer): SequentialCell<
    (0): Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26625d0cd0>, bias_init=None, format=NCHW>
    (1): BatchNorm2d<num_features=64, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_down_sample_layer.1.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_down_sample_layer.1.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_down_sample_layer.1.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_down_sample_layer.1.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
    >
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
30 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception1.batch_norm layer_type: BatchNorm2d selected param:num_features input_shape:[2, 256, 35, 35] output_shape:[2, 256, 35, 35]
Edit value: 85 new_inshape: (2, 85, 35, 35) new_outshape: (2, 85, 35, 35)
mutate op infor:
SequentialCell<
  (0): Replace_ms<>
  (1): BatchNorm2d<num_features=85, eps=1e-05, momentum=0.09999999999999998, gamma=Parameter (name=batch_norm.1.gamma, shape=(85,), dtype=Float32, requires_grad=True), beta=Parameter (name=batch_norm.1.beta, shape=(85,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=batch_norm.1.moving_mean, shape=(85,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=batch_norm.1.moving_variance, shape=(85,), dtype=Float32, requires_grad=False)>
  (2): Replace_ms<>
  >
mut_result:True
31 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: maxpool1 layer_type: MaxPool2d selected param:stride input_shape:[2, 64, 72, 72] output_shape:[2, 64, 35, 35]
Edit value: (3, 4) new_inshape: (2, 64, 72, 72) new_outshape: (2, 64, 24, 18)
mutate op infor:
SequentialCell<
  (0): MaxPool2d<kernel_size=3, stride=(3, 4), pad_mode=VALID>
  (1): Replace_ms<>
  >
mut_result:True
32 generation!

Adopt LD mut_strategy!
delete layer_name:avgpool
mut_result:No suitable ops for LD mutation!
33 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
34 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception1.p4_2 layer_type: Conv2d selected param:in_channels input_shape:[2, 64, 35, 35] output_shape:[2, 32, 35, 35]
Edit value: 32 new_inshape: (2, 32, 35, 35) new_outshape: (2, 32, 35, 35)
mutate op infor:
SequentialCell<
  (0): Replace_ms<>
  (1): Conv2d<input_channels=32, output_channels=32, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26beddfed0>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f2661071190>, format=NCHW>
  >
mut_result:True
35 generation!

Adopt LD mut_strategy!
delete layer_name:fc
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
36 generation!

Adopt LD mut_strategy!
delete layer_name:avgpool
mut_result:No suitable ops for LD mutation!
37 generation!

Adopt SM mut_strategy!
select layer: inception1.p3_1 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: after
mutate output_shape: [2, 23, 16, 22]
mut_result:True
38 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
39 generation!

Adopt LD mut_strategy!
delete layer_name:inception1.p3_1
mut_result:No suitable ops for LD mutation!
40 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: inception2.p3_1 layer_type: Conv2d selected param:in_channels input_shape:[2, 256, 35, 35] output_shape:[2, 64, 35, 35]
Edit value: 128 new_inshape: (2, 128, 35, 35) new_outshape: (2, 64, 35, 35)
mutate op infor:
SequentialCell<
  (0): Replace_ms<>
  (1): Conv2d<input_channels=128, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=True, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf4b99d0>, bias_init=<mindspore.common.initializer.Uniform object at 0x7f26bf4b9890>, format=NCHW>
  >
mut_result:True
41 generation!

Adopt LD mut_strategy!
delete layer_name:avgpool
mut_result:No suitable ops for LD mutation!
42 generation!

Adopt LD mut_strategy!
delete layer_name:conv1
mut_result:No suitable ops for LD mutation!
43 generation!

Adopt LC mut_strategy!
select layer: inception2.p4_1 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 256, 35, 35] out_shape: [2, 256, 35, 35]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: MaxPool2d<kernel_size=3, stride=1, pad_mode=VALID>
insert_layer_outshape not equal!: [2, 256, 35, 35]
mut_result:True
44 generation!

Adopt SM mut_strategy!
select layer: inception1.batch_norm layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 35, 35] out_shape: [2, 256, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
45 generation!

Adopt SM mut_strategy!
select layer: inception1.p3_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 96, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
46 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
47 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
48 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:2
select layer: inception1.p4_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 32, 35, 35]
mut Basic type: True
select insert layer: ReLU6<>
mut_result:True
49 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: conv3 layer_type: Conv2d selected param:out_channels input_shape:[2, 32, 72, 72] output_shape:[2, 64, 72, 72]
Edit value: 16 new_inshape: (2, 32, 72, 72) new_outshape: (2, 16, 72, 72)
mutate op infor:
SequentialCell<
  (0): Conv2d<input_channels=32, output_channels=16, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f266814f290>, bias_init=None, format=NCHW>
  (1): Replace_ms<>
  >
mut_result:True
50 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:2
select op: dropout layer_type: Dropout selected param:keep_prob input_shape:[2, 288, 28, 28] output_shape:[2, 288, 28, 28]
Edit value: 0.2 new_inshape: (2, 288, 28, 28) new_outshape: (2, 288, 28, 28)
Dropout<keep_prob=0.2>
mut_result:True
51 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p1_1 layer_type: <class 'mindspore.nn.layer.activation.ELU'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: ELU<>
insert_layer_outshape equal!
mut_result:True
52 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: bn1 layer_type: BatchNorm2d selected param:momentum input_shape:[2, 32, 74, 74] output_shape:[2, 32, 74, 74]
Edit value: 0.3999999999999999 new_inshape: (2, 32, 74, 74) new_outshape: (2, 32, 74, 74)
BatchNorm2d<num_features=32, eps=1e-05, momentum=0.3999999999999999, gamma=Parameter (name=bn1.gamma, shape=(32,), dtype=Float32, requires_grad=True), beta=Parameter (name=bn1.beta, shape=(32,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=bn1.moving_mean, shape=(32,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=bn1.moving_variance, shape=(32,), dtype=Float32, requires_grad=False)>
mut_result:True
53 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
54 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: dropout layer_type: <class 'mindspore.nn.layer.basic.Dropout'> in_shape: [2, 288, 28, 28] out_shape: [2, 288, 28, 28]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: convbnrelu<
  (conbnrelu_conv): Conv2d<input_channels=288, output_channels=288, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bf4cd550>, bias_init=None, format=NCHW>
  (conbnrelu_bn): BatchNorm2d<num_features=288, eps=1e-05, momentum=0.9, gamma=Parameter (name=conbnrelu_bn.gamma, shape=(288,), dtype=Float32, requires_grad=True), beta=Parameter (name=conbnrelu_bn.beta, shape=(288,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=conbnrelu_bn.moving_mean, shape=(288,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=conbnrelu_bn.moving_variance, shape=(288,), dtype=Float32, requires_grad=False)>
  (conbnrelu_relu): ReLU<>
  >
insert_layer_outshape equal!
mut_result:True
55 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:1
select layer: dropout layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 288, 28, 28] out_shape: [2, 288, 28, 28]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Mish<>
insert_layer_outshape equal!
mut_result:True
56 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
57 generation!

Adopt LD mut_strategy!
delete layer_name:inception2.p3_1
candidate_in_mutlayers_indice:1
adopt DeleteCell Replace_msmut_result:True
58 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
59 generation!

Adopt LD mut_strategy!
delete layer_name:inception2.p4_2
mut_result:No suitable ops for LD mutation!
60 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
61 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators in_channels!
mut_result:Parameter Miss
62 generation!

Adopt SM mut_strategy!
select layer: avgpool layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 288, 35, 35] out_shape: [2, 288, 28, 28]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
63 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators out_channels!
mut_result:Parameter Miss
64 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:0
select op: avgpool layer_type: AvgPool2d selected param:stride input_shape:[2, 288, 35, 35] output_shape:[2, 288, 28, 28]
Edit value: (2, 3) new_inshape: (2, 288, 35, 35) new_outshape: (2, 288, 14, 10)
mutate op infor:
SequentialCell<
  (0): AvgPool2d<kernel_size=8, stride=(2, 3), pad_mode=VALID>
  (1): Replace_ms<>
  >
mut_result:True
65 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
66 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators keep_prob!
mut_result:Parameter Miss
67 generation!

Adopt LD mut_strategy!
delete layer_name:bn1
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
68 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators in_channels!
mut_result:Parameter Miss
69 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators out_channels!
mut_result:Parameter Miss
70 generation!

Adopt LC mut_strategy!
Illegal LC mutate!
mut_result:LC Create illegal layer!
71 generation!

Adopt SM mut_strategy!
select layer: conv3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 32, 72, 72] out_shape: [2, 64, 72, 72]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
72 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:1
select layer: dropout layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 288, 28, 28] out_shape: [2, 288, 28, 28]
mut Basic type: True
select insert layer: MaxPool2d<kernel_size=1, stride=1, pad_mode=VALID>
mut_result:True
73 generation!

Adopt LD mut_strategy!
delete layer_name:inception2.batch_norm
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
74 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
75 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
76 generation!

Adopt LC mut_strategy!
Illegal LC mutate!
mut_result:LC Create illegal layer!
77 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
78 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
79 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
80 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: inception1.p1_1 layer_type: <class 'mindspore.nn.layer.activation.ELU'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: ResidualBlock<
  (residual_conv1): Conv2d<input_channels=64, output_channels=16, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26626646d0>, bias_init=None, format=NCHW>
  (residual_bn1): BatchNorm2d<num_features=16, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn1.gamma, shape=(16,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn1.beta, shape=(16,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn1.moving_mean, shape=(16,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn1.moving_variance, shape=(16,), dtype=Float32, requires_grad=False)>
  (residual_conv2): Conv2d<input_channels=16, output_channels=16, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f2660133590>, bias_init=None, format=NCHW>
  (residual_bn2): BatchNorm2d<num_features=16, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn2.gamma, shape=(16,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn2.beta, shape=(16,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn2.moving_mean, shape=(16,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn2.moving_variance, shape=(16,), dtype=Float32, requires_grad=False)>
  (residual_conv3): Conv2d<input_channels=16, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f2660150650>, bias_init=None, format=NCHW>
  (residual_bn3): BatchNorm2d<num_features=64, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn3.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn3.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn3.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn3.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
  (residual_relu1): ReLU<>
  (residual_relu2): ReLU<>
  (residual_relu3): ReLU<>
  (residual_down_sample_layer): SequentialCell<
    (0): Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26bec87450>, bias_init=None, format=NCHW>
    (1): BatchNorm2d<num_features=64, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_down_sample_layer.1.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_down_sample_layer.1.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_down_sample_layer.1.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_down_sample_layer.1.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
    >
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
81 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators momentum!
mut_result:Parameter Miss
82 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:2
select layer: inception1.p4_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 64, 35, 35]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: dwpw_group<
  (depthwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=64, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f2660394110>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=64, eps=1e-05, momentum=0.9, gamma=Parameter (name=depthwise.dwpw_bn.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=depthwise.dwpw_bn.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=depthwise.dwpw_bn.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=depthwise.dwpw_bn.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): GELU<>
    >
  (pointwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f26600f5610>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=64, eps=1e-05, momentum=0.9, gamma=Parameter (name=pointwise.dwpw_bn.gamma, shape=(64,), dtype=Float32, requires_grad=True), beta=Parameter (name=pointwise.dwpw_bn.beta, shape=(64,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=pointwise.dwpw_bn.moving_mean, shape=(64,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=pointwise.dwpw_bn.moving_variance, shape=(64,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): GELU<>
    >
  >
insert_layer_outshape equal!
mut_result:True
83 generation!

Adopt SM mut_strategy!
select layer: conv3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 32, 72, 72] out_shape: [2, 64, 72, 72]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
84 generation!

Adopt LD mut_strategy!
delete layer_name:dropout
candidate_in_mutlayers_indice:1
mut_result:True
85 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
86 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:0
select op: avgpool layer_type: AvgPool2d selected param:kernel_size input_shape:[2, 288, 35, 35] output_shape:[2, 288, 28, 28]
Edit value: (3, 4) new_inshape: (2, 288, 35, 35) new_outshape: (2, 288, 17, 11)
mutate op infor:
SequentialCell<
  (0): AvgPool2d<kernel_size=(3, 4), stride=(2, 3), pad_mode=VALID>
  (1): Replace_ms<>
  >
mut_result:True
87 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:0
select layer: dropout layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 288, 28, 28] out_shape: [2, 288, 28, 28]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: downsample<
  (downsample_conv): Conv2d<input_channels=288, output_channels=288, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f266037c850>, bias_init=None, format=NCHW>
  (downsample_bn): BatchNorm2d<num_features=288, eps=1e-05, momentum=0.9, gamma=Parameter (name=downsample_bn.gamma, shape=(288,), dtype=Float32, requires_grad=True), beta=Parameter (name=downsample_bn.beta, shape=(288,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=downsample_bn.moving_mean, shape=(288,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=downsample_bn.moving_variance, shape=(288,), dtype=Float32, requires_grad=False)>
  >
mut_result:True
88 generation!

Adopt LC mut_strategy!
Illegal LC mutate!
mut_result:LC Create illegal layer!
89 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:0
select layer: inception1.p4_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 35, 35] out_shape: [2, 32, 35, 35]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dropout<keep_prob=0.5>
mut_result:True
90 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
91 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
92 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
93 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
94 generation!

Adopt SM mut_strategy!
select layer: inception2.p4_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 35, 35] out_shape: [2, 256, 35, 35]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
95 generation!

Adopt LC mut_strategy!
Illegal LC mutate!
mut_result:LC Create illegal layer!
96 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
97 generation!

Adopt LC mut_strategy!
Illegal LC mutate!
mut_result:LC Create illegal layer!
98 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:0
select op: avgpool layer_type: AvgPool2d selected param:stride input_shape:[2, 288, 35, 35] output_shape:[2, 288, 28, 28]
Edit value: (4, 2) new_inshape: (2, 288, 35, 35) new_outshape: (2, 288, 9, 16)
mutate op infor:
SequentialCell<
  (0): AvgPool2d<kernel_size=(3, 4), stride=(4, 2), pad_mode=VALID>
  (1): Replace_ms<>
  >
mut_result:True
99 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
100 generation!

mutation trace: {'1': [1], '2': [1, 2], '3': [1, 2, 3], '4': [1, 2, 3, 4], '5': [1, 2, 3, 4, 5], '6': [1, 2, 3, 4, 5, 6], '7': [1, 2, 3, 4, 5, 6, 7], '8': [1, 2, 3, 4, 5, 6, 7, 8], '9': [1, 2, 3, 4, 5, 6, 7, 8, 9], '10': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], '11': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], '12': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], '13': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], '14': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], '15': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], '16': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], '17': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], '18': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], '19': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], '20': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], '21': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], '22': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], '23': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], '24': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], '25': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], '26': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], '27': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], '28': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], '29': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], '30': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], '31': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], '32': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], '33': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], '34': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], '35': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], '36': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], '37': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], '38': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], '39': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], '40': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], '41': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], '42': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], '43': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], '44': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], '45': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], '46': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], '47': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], '48': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], '49': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], '50': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], '51': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], '52': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], '53': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], '54': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], '55': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], '56': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], '57': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], '58': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], '59': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], '60': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], '61': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], '62': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], '63': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], '64': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], '65': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], '66': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], '67': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], '68': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], '69': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], '70': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], '71': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], '72': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], '73': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], '74': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], '75': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], '76': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], '77': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], '78': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], '79': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], '80': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], '81': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], '82': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], '83': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], '84': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], '85': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], '86': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], '87': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], '88': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], '89': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], '90': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], '91': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], '92': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], '93': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], '94': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], '95': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], '96': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], '97': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], '98': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], '99': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], '100': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]}
