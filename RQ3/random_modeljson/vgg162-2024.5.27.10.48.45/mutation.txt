Adopt LD mut_strategy!
delete layer_name:flatten
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
1 generation!

Adopt SM mut_strategy!
select layer: relu4_2 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: all
mutate input_shape: [2, 7, 35]
mutate output_shape: [2, 40, 49, 6, 10]
mut_result:True
2 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
3 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: conv1_2 layer_type: Conv2d selected param:out_channels input_shape:[2, 64, 224, 224] output_shape:[2, 64, 224, 224]
Edit value: 192 new_inshape: (2, 64, 224, 224) new_outshape: (2, 192, 224, 224)
mutate op infor:
SequentialCell<
  (0): Conv2d<input_channels=64, output_channels=192, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352aa7ed10>, bias_init=None, format=NCHW>
  (1): Replace_ms<>
  >
mut_result:True
4 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu5_1 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: downsample<
  (downsample_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352aa74c90>, bias_init=None, format=NCHW>
  (downsample_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=downsample_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=downsample_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=downsample_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=downsample_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
5 generation!

Adopt SM mut_strategy!
select layer: conv1_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 3, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: after
mutate output_shape: [2, 31]
mut_result:True
6 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: dropout2 layer_type: <class 'mindspore.nn.layer.basic.Dropout'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=4096, output_channels=4096, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a3601d0>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:False
7 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: dropout1 layer_type: <class 'mindspore.nn.layer.basic.Dropout'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
select insert layer: MaxPool2d<kernel_size=1, stride=1, pad_mode=VALID>
replace Basic with CM op!
mut_result:True
8 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators eps!
mut_result:Parameter Miss
9 generation!

Adopt SM mut_strategy!
select layer: relu3_1 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 256, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: all
mutate input_shape: [2, 34, 19, 16, 41]
mutate output_shape: [2, 4, 13]
mut_result:True
10 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators eps!
mut_result:Parameter Miss
11 generation!

Adopt SM mut_strategy!
select layer: relu4_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
12 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv3_2 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 256, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
select insert layer: AvgPool2d<kernel_size=1, stride=1, pad_mode=VALID>
replace Basic with CM op!
mut_result:True
13 generation!

Adopt LD mut_strategy!
delete layer_name:relu2_2
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
14 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu5_2 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: ResidualBlock<
  (residual_conv1): Conv2d<input_channels=512, output_channels=128, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352ae8b6d0>, bias_init=None, format=NCHW>
  (residual_bn1): BatchNorm2d<num_features=128, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn1.gamma, shape=(128,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn1.beta, shape=(128,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn1.moving_mean, shape=(128,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn1.moving_variance, shape=(128,), dtype=Float32, requires_grad=False)>
  (residual_conv2): Conv2d<input_channels=128, output_channels=128, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a387d50>, bias_init=None, format=NCHW>
  (residual_bn2): BatchNorm2d<num_features=128, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn2.gamma, shape=(128,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn2.beta, shape=(128,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn2.moving_mean, shape=(128,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn2.moving_variance, shape=(128,), dtype=Float32, requires_grad=False)>
  (residual_conv3): Conv2d<input_channels=128, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a2aefd0>, bias_init=None, format=NCHW>
  (residual_bn3): BatchNorm2d<num_features=512, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_bn3.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_bn3.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_bn3.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_bn3.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  (residual_relu1): ReLU<>
  (residual_relu2): ReLU<>
  (residual_relu3): ReLU<>
  (residual_down_sample_layer): SequentialCell<
    (0): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352b2b7e90>, bias_init=None, format=NCHW>
    (1): BatchNorm2d<num_features=512, eps=0.0001, momentum=0.9, gamma=Parameter (name=residual_down_sample_layer.1.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=residual_down_sample_layer.1.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=residual_down_sample_layer.1.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=residual_down_sample_layer.1.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
    >
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
15 generation!

Adopt LD mut_strategy!
delete layer_name:maxpool3
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
16 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu5_3 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: convbnrelu<
  (conbnrelu_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e4561b90>, bias_init=None, format=NCHW>
  (conbnrelu_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=conbnrelu_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=conbnrelu_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=conbnrelu_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=conbnrelu_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  (conbnrelu_relu): ReLU<>
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
17 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: dropout2 layer_type: Dropout selected param:keep_prob input_shape:[2, 4096] output_shape:[2, 4096]
Edit value: 0.25 new_inshape: (2, 4096) new_outshape: (2, 4096)
Dropout<keep_prob=0.25>
mut_result:True
18 generation!

Adopt SM mut_strategy!
select layer: maxpool5 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 7, 7]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: all
mutate input_shape: [2, 35, 22]
mutate output_shape: [2, 19, 16]
mut_result:True
19 generation!

Adopt LC mut_strategy!
select layer: conv4_3 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=512, output_channels=512, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e4700510>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:True
20 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv5_2 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
insert_layer_outshape not equal!: [2, 512, 14, 14]
mut_result:True
21 generation!

Adopt SM mut_strategy!
select layer: conv3_2 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 256, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: all
mutate input_shape: [2, 19, 26, 45]
mutate output_shape: [2, 20, 25]
mut_result:True
22 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:1
select layer: relu5_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
select insert layer: LeakyReLU<>
mut_result:True
23 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu1_1 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: ELU<>
insert_layer_outshape equal!
mut_result:True
24 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv5_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: AvgPool2d<kernel_size=1, stride=1, pad_mode=VALID>
insert_layer_outshape equal!
mut_result:True
25 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc2 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
select insert layer: GELU<>
replace Basic with CM op!
mut_result:True
26 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: maxpool2 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 56, 56]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: GELU<>
insert_layer_outshape equal!
mut_result:True
27 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu4_3 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
select insert layer: dwpw_group<
  (depthwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=512, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e441eb50>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=1.depthwise.dwpw_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=1.depthwise.dwpw_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=1.depthwise.dwpw_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=1.depthwise.dwpw_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): Mish<>
    >
  (pointwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e44de610>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=1.pointwise.dwpw_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=1.pointwise.dwpw_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=1.pointwise.dwpw_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=1.pointwise.dwpw_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): Mish<>
    >
  >
replace Basic with CM op!
mut_result:True
28 generation!

Adopt LD mut_strategy!
delete layer_name:relu3_3
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
29 generation!

Adopt LC mut_strategy!
select layer: conv4_2 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=512, output_channels=512, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a6a3f50>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:True
30 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators momentum!
mut_result:Parameter Miss
31 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu1_2 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: SE<
  (SE_pool): GlobalAvgPooling<>
  (act): HSigmoid<>
  (SE_act1): ReLU<>
  (SE_act2): HSigmoid<>
  >
insert_layer_outshape not equal!: [2, 64, 224, 224]
mut_result:True
32 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
33 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: conv5_3 layer_type: Conv2d selected param:group input_shape:[2, 512, 14, 14] output_shape:[2, 512, 14, 14]
Edit value: 2 new_inshape: (2, 512, 14, 14) new_outshape: (2, 512, 14, 14)
Conv2d<input_channels=512, output_channels=512, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=2, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a647090>, bias_init=None, format=NCHW>
mut_result:True
34 generation!

Adopt LC mut_strategy!
select layer: conv2_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 64, 112, 112] out_shape: [2, 128, 112, 112]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=128, output_channels=128, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352a314850>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:True
35 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: maxpool4 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: convbnrelu<
  (conbnrelu_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e41319d0>, bias_init=None, format=NCHW>
  (conbnrelu_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=conbnrelu_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=conbnrelu_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=conbnrelu_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=conbnrelu_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  (conbnrelu_relu): ReLU<>
  >
insert_layer_outshape not equal!: [2, 512, 14, 14]
mut_result:True
36 generation!

Adopt SM mut_strategy!
select layer: relu1_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
37 generation!

Adopt SM mut_strategy!
select layer: conv2_2 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 112, 112]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: before
mutate input_shape: [2, 11, 38, 18]
mut_result:True
38 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
39 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:0
select layer: maxpool2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 56, 56]
mut Basic type: True
select insert layer: SE<
  (SE_pool): GlobalAvgPooling<>
  (act): HSigmoid<>
  (SE_act1): ReLU<>
  (SE_act2): HSigmoid<>
  >
mut_result:True
40 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu1_1 layer_type: <class 'mindspore.nn.layer.activation.ELU'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
select insert layer: Conv2d<input_channels=64, output_channels=64, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e44ab410>, bias_init=None, format=NCHW>
replace Basic with CM op!
mut_result:True
41 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators num_features!
mut_result:Parameter Miss
42 generation!

Adopt LC mut_strategy!
select layer: conv4_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 256, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=512, output_channels=512, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e4781f10>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:True
43 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc2 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
select insert layer: ReLU<>
replace Basic with CM op!
mut_result:True
44 generation!

Adopt SM mut_strategy!
select layer: relu5_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
candidate_in_mutlayers_indice:0
mutate state: all
mutate input_shape: [2, 24]
mutate output_shape: [2, 39, 41]
mut_result:True
45 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:1
select layer: relu5_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: SE<
  (SE_pool): GlobalAvgPooling<>
  (act): HSigmoid<>
  (SE_act1): ReLU<>
  (SE_act2): HSigmoid<>
  >
insert_layer_outshape equal!
mut_result:False
46 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
47 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators momentum!
mut_result:Parameter Miss
48 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
49 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv5_3 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
insert_layer_outshape equal!
add Cascade_op after basicop!
mut_result:True
50 generation!

Adopt SM mut_strategy!
select layer: conv1_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 3, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
51 generation!

Adopt SM mut_strategy!
select layer: relu_fc1 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: after
mutate output_shape: [2, 36, 6]
mut_result:True
52 generation!

Adopt LD mut_strategy!
delete layer_name:relu2_1
candidate_in_mutlayers_indice:-1
adopt DeleteCell EmptyCell
mut_result:True
53 generation!

Adopt LC mut_strategy!
select layer: fc1 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 25088] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dense<input_channels=25088, output_channels=4096, has_bias=True>
Illegal LC mutate!
For 'MatMul', the type of 'x2' should be same as 'x1', but got 'x1' with type Tensor[Float16] and 'x2' with type Tensor[Float32].

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore/core/ops/mat_mul.cc:143 InferType

mut_result:LC Create illegal layer!
54 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:-1
select op: dropout2 layer_type: Dropout selected param:keep_prob input_shape:[2, 4096] output_shape:[2, 4096]
Edit value: 0.08333333333333333 new_inshape: (2, 4096) new_outshape: (2, 4096)
Dropout<keep_prob=0.08333333333333333>
mut_result:True
55 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu4_1 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
insert_layer_outshape not equal!: [2, 512, 28, 28]
mut_result:True
56 generation!

Adopt LD mut_strategy!
delete layer_name:relu_fc1
mut_result:No suitable ops for LD mutation!
57 generation!

Adopt LC mut_strategy!
select layer: dropout2 layer_type: <class 'mindspore.nn.layer.basic.Dropout'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dropout<keep_prob=0.08333333333333333>
insert_layer_outshape equal!
mut_result:True
58 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
59 generation!

Adopt LC mut_strategy!
select layer: fc3 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 4096] out_shape: [2, 1000]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dense<input_channels=4096, output_channels=1000, has_bias=True>
Illegal LC mutate!
For 'MatMul', the type of 'x2' should be same as 'x1', but got 'x1' with type Tensor[Float16] and 'x2' with type Tensor[Float32].

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore/core/ops/mat_mul.cc:143 InferType

mut_result:LC Create illegal layer!
60 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:0
select layer: conv4_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
select insert layer: convbnrelu<
  (conbnrelu_conv): Conv2d<input_channels=256, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e454e690>, bias_init=None, format=NCHW>
  (conbnrelu_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=1.conbnrelu_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=1.conbnrelu_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=1.conbnrelu_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=1.conbnrelu_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  (conbnrelu_relu): ReLU<>
  >
mut_result:True
61 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv3_3 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 256, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Mish<>
insert_layer_outshape equal!
mut_result:True
62 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu_fc2 layer_type: <class 'mindspore.nn.layer.activation.ReLU'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
insert_layer_outshape not equal!: [2, 4096]
mut_result:True
63 generation!

Adopt SM mut_strategy!
select layer: relu_fc1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
64 generation!

Adopt SM mut_strategy!
select layer: relu5_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
candidate_in_mutlayers_indice:2
mutate state: before
mutate input_shape: [2, 13, 40, 40, 25]
mut_result:True
65 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
66 generation!

Adopt SM mut_strategy!
select layer: conv2_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 64, 112, 112] out_shape: [2, 128, 112, 112]
mut Basic type: True
candidate_in_mutlayers_indice:0
mutate state: all
mutate input_shape: [2, 40]
mutate output_shape: [2, 3, 4, 20, 20]
mut_result:True
67 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:0
select layer: conv4_3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: downsample<
  (downsample_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f352abc7c90>, bias_init=None, format=NCHW>
  (downsample_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=downsample_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=downsample_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=downsample_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=downsample_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
  >
mut_result:True
68 generation!

Adopt SM mut_strategy!
select layer: dropout1 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
candidate_in_mutlayers_indice:-1
mutate state: before
mutate input_shape: [2, 50]
mut_result:True
69 generation!

Adopt SM mut_strategy!
select layer: relu3_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
mut_result:No suitable ops for SM mutation!
70 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: conv3_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 128, 56, 56] out_shape: [2, 256, 56, 56]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Mish<>
insert_layer_outshape not equal!: [2, 256, 56, 56]
mut_result:True
71 generation!

Adopt LD mut_strategy!
delete layer_name:relu5_1
mut_result:No suitable ops for LD mutation!
72 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:2
select layer: conv2_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 112, 112]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
insert_layer_outshape equal!
mut_result:True
73 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:0
select layer: conv4_3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
select insert layer: LeakyReLU<>
mut_result:True
74 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc3 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 4096] out_shape: [2, 1000]
mut Basic type: True
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
replace Basic with CM op!
mut_result:True
75 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:0
select layer: dropout2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: BatchNorm2d<num_features=4096, eps=1e-05, momentum=0.9, gamma=Parameter (name=gamma, shape=(4096,), dtype=Float32, requires_grad=True), beta=Parameter (name=beta, shape=(4096,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=mean, shape=(4096,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=variance, shape=(4096,), dtype=Float32, requires_grad=False)>
mut_result:False
76 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators momentum!
mut_result:Parameter Miss
77 generation!

Adopt LD mut_strategy!
delete layer_name:relu_fc1
mut_result:No suitable ops for LD mutation!
78 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
79 generation!

Adopt LC mut_strategy!
select layer: maxpool1 layer_type: <class 'mindspore.nn.layer.pooling.MaxPool2d'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 112, 112]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: MaxPool2d<kernel_size=2, stride=2, pad_mode=VALID>
insert_layer_outshape not equal!: [2, 64, 112, 112]
mut_result:True
80 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu1_1 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 64, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dense<input_channels=64, output_channels=64>
insert_layer_outshape equal!
Illegal LA mutate!
For primitive[Conv2D], the input type must be same.
name:[w]:Ref[Tensor[Float32]].
name:[x]:Tensor[Float16].

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore/core/utils/check_convert_utils.cc:1028 _CheckTypeSame

mut_result:LA Create illegal layer!
81 generation!

Adopt PM mut_strategy!
The target model do not have the mutator operators num_features!
mut_result:Parameter Miss
82 generation!

Adopt PM mut_strategy!
candidate_in_mutlayers_indice:0
select op: conv1_1 layer_type: Conv2d selected param:group input_shape:[2, 3, 224, 224] output_shape:[2, 64, 224, 224]
Edit value: 1 new_inshape: (2, 3, 224, 224) new_outshape: (2, 64, 224, 224)
Conv2d<input_channels=3, output_channels=64, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34dc0a1610>, bias_init=None, format=NCHW>
mut_result:True
83 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
84 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:1
select layer: maxpool2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 56, 56]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Mish<>
insert_layer_outshape equal!
mut_result:True
85 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
86 generation!

Adopt LC mut_strategy!
select layer: conv1_1 layer_type: <class 'mindspore.nn.layer.conv.Conv2d'> in_shape: [2, 3, 224, 224] out_shape: [2, 64, 224, 224]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Conv2d<input_channels=64, output_channels=64, kernel_size=(3, 3), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34bc4979d0>, bias_init=None, format=NCHW>
insert_layer_outshape equal!
mut_result:True
87 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:2
select layer: relu5_3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: dwpw_group<
  (depthwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=512, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e40b0cd0>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=depthwise.dwpw_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=depthwise.dwpw_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=depthwise.dwpw_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=depthwise.dwpw_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): Mish<>
    >
  (pointwise): dwpw_basic<
    (dwpw_conv): Conv2d<input_channels=512, output_channels=512, kernel_size=(1, 1), stride=(1, 1), pad_mode=same, padding=0, dilation=(1, 1), group=1, has_bias=False, weight_init=<mindspore.common.initializer.HeUniform object at 0x7f34e47c2390>, bias_init=None, format=NCHW>
    (dwpw_bn): BatchNorm2d<num_features=512, eps=1e-05, momentum=0.9, gamma=Parameter (name=pointwise.dwpw_bn.gamma, shape=(512,), dtype=Float32, requires_grad=True), beta=Parameter (name=pointwise.dwpw_bn.beta, shape=(512,), dtype=Float32, requires_grad=True), moving_mean=Parameter (name=pointwise.dwpw_bn.moving_mean, shape=(512,), dtype=Float32, requires_grad=False), moving_variance=Parameter (name=pointwise.dwpw_bn.moving_variance, shape=(512,), dtype=Float32, requires_grad=False)>
    (dwpw_activation): Mish<>
    >
  >
mut_result:True
88 generation!

Adopt LC mut_strategy!
select layer: fc1 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 25088] out_shape: [2, 4096]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: Dense<input_channels=25088, output_channels=4096, has_bias=True>
Illegal LC mutate!
For 'MatMul', the type of 'x2' should be same as 'x1', but got 'x1' with type Tensor[Float16] and 'x2' with type Tensor[Float32].

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore/core/ops/mat_mul.cc:143 InferType

mut_result:LC Create illegal layer!
89 generation!

Adopt RA mut_strategy!
mut_result:No suitable ops for RA mutation!
90 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:0
select layer: conv2_2 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 128, 112, 112] out_shape: [2, 128, 112, 112]
mut Basic type: True
select insert layer: GELU<>
mut_result:True
91 generation!

Adopt LD mut_strategy!
delete layer_name:relu4_2
mut_result:No suitable ops for LD mutation!
92 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc1 layer_type: <class 'mindspore.nn.layer.basic.Dense'> in_shape: [2, 25088] out_shape: [2, 4096]
mut Basic type: True
select insert layer: ELU<>
replace Basic with CM op!
mut_result:True
93 generation!

Adopt SM mut_strategy!
select layer: conv4_1 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 256, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
candidate_in_mutlayers_indice:0
mutate state: all
mutate input_shape: [2, 43, 43, 3, 38]
mutate output_shape: [2, 34, 49]
mut_result:True
94 generation!

Adopt CM mut_strategy!
mut_result:No suitable ops for CM mutation!
95 generation!

Adopt LD mut_strategy!
delete layer_name:fc3
candidate_in_mutlayers_indice:-1
adopt DeleteCell Replace_ms
mut_result:True
96 generation!

Adopt CM mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: fc2 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 4096] out_shape: [2, 4096]
mut Basic type: True
select insert layer: MaxPool2d<kernel_size=1, stride=1, pad_mode=VALID>
replace Basic with CM op!
mut_result:True
97 generation!

Adopt LA mut_strategy!
candidate_in_mutlayers_indice:-1
select layer: relu4_3 layer_type: <class 'common.mutation_ms.Layer_utils.CM_branchCell'> in_shape: [2, 512, 28, 28] out_shape: [2, 512, 28, 28]
mut Basic type: True
add Basic layer : Basic_op
select insert layer: MaxPool2d<kernel_size=1, stride=1, pad_mode=VALID>
insert_layer_outshape equal!
mut_result:True
98 generation!

Adopt RA mut_strategy!
candidate_in_mutlayers_indice:1
select layer: conv5_3 layer_type: <class 'mindspore.nn.layer.container.SequentialCell'> in_shape: [2, 512, 14, 14] out_shape: [2, 512, 14, 14]
mut Basic type: True
add Basic layer : Cascade_op
select insert layer: Inception_A<
  (branch0): BasicConv2d<
    (relu): ReLU<>
    >
  (branch1): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch2): SequentialCell<
    (0): BasicConv2d<
      (relu): ReLU<>
      >
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    (2): BasicConv2d<
      (relu): ReLU<>
      >
    >
  (branch_pool): SequentialCell<
    (0): AvgPool2d<kernel_size=3, stride=1, pad_mode=SAME>
    (1): BasicConv2d<
      (relu): ReLU<>
      >
    >
  >
replace Basic with Cascade!
mut_result:True
99 generation!

Adopt LA mut_strategy!
mut_result:No suitable ops for LA mutation!
100 generation!

mutation trace: {'1': [1], '2': [1, 2], '3': [1, 2, 3], '4': [1, 2, 3, 4], '5': [1, 2, 3, 4, 5], '6': [1, 2, 3, 4, 5, 6], '7': [1, 2, 3, 4, 5, 6, 7], '8': [1, 2, 3, 4, 5, 6, 7, 8], '9': [1, 2, 3, 4, 5, 6, 7, 8, 9], '10': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], '11': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], '12': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], '13': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], '14': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], '15': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], '16': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], '17': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], '18': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], '19': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], '20': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], '21': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], '22': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], '23': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], '24': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], '25': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], '26': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], '27': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], '28': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], '29': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], '30': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], '31': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], '32': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], '33': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], '34': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], '35': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], '36': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], '37': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], '38': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], '39': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], '40': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], '41': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], '42': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], '43': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], '44': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], '45': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], '46': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], '47': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], '48': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], '49': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], '50': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], '51': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], '52': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], '53': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], '54': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], '55': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], '56': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], '57': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], '58': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], '59': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], '60': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], '61': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], '62': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], '63': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], '64': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], '65': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], '66': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], '67': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], '68': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], '69': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], '70': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], '71': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], '72': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], '73': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], '74': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], '75': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], '76': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], '77': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], '78': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], '79': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], '80': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], '81': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], '82': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], '83': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], '84': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], '85': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], '86': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], '87': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], '88': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], '89': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], '90': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], '91': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], '92': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], '93': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], '94': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], '95': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], '96': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], '97': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], '98': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], '99': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], '100': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]}
